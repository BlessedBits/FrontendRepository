import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import useAxiosPrivate from "../../hooks/useAxiosPrivate";
import { Loading } from "../basic/LoadingAnimation";
import { getUserCourses, deleteCourse, updateCourse } from "../../api/course";
import styles from "./CourseList.module.css";
import NewCourseModal from "./NewCourseModal";
import Notification from "../basic/Notification";
import { getAllClassesSchool } from "../../api/class";

function CourseList({ baseInfo }) {
    const [courses, setCourses] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [notification, setNotification] = useState({ message: "", type: "" });
    const [base, setBaseInfo] = useState(null);
    const axiosPrivate = useAxiosPrivate();
    const navigate = useNavigate();
    const [editingCourseId, setEditingCourseId] = useState(null);
    const [newCourseName, setNewCourseName] = useState("");

    useEffect(() => {
        const fetchCourses = async () => {
            try {
                setBaseInfo(baseInfo);
                const response = await getUserCourses(baseInfo, axiosPrivate);
                setCourses(response);
            } catch (err) {
                console.error(err.message);
                setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫—É—Ä—Å–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
            } finally {
                setLoading(false);
            }
        };
        fetchCourses();
    }, [axiosPrivate]);

    const refreshCourses = async () => {
        try {
            setNotification({ type: "loading", message: "–û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤..." });
            const updatedCourses = await getUserCourses(base, axiosPrivate);
            setCourses(updatedCourses);
            setNotification({ type: "success", message: "–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ!" });
        } catch (err) {
            setNotification({ type: "error", message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ." });
        }
    };

    const handleDeleteCourse = async (id) => {
        if (!window.confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç?")) return;
        setNotification({ type: "loading", message: "–ö—É—Ä—Å –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è..." });
        try {
            await deleteCourse(id, axiosPrivate);
            setCourses((prevCourses) => prevCourses.filter((course) => course.id !== id));
            setNotification({ type: "success", message: "–ö—É—Ä—Å –≤–∏–¥–∞–ª–µ–Ω–æ" });
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫—É—Ä—Å—É:", error);
            setNotification({ type: "error", message: "–ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ" });
        }
    };

    const handleUpdateCourse = async (id, newName) => {
        try {
            await updateCourse(id, { name: newName }, axiosPrivate);
            setCourses((prevCourses) =>
                prevCourses.map((course) => (course.id === id ? { ...course, name: newName } : course))
            );
            setNotification({ type: "success", message: "–ö—É—Ä—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!" });
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—É—Ä—Å—É:", error);
            setNotification({ type: "error", message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å." });
        }
    };

    if (loading) return <Loading />;
    if (error) return <p className={styles.error}>{error}</p>;

    return (
        <div className={styles.courses}>
            {base?.role === "SCHOOL_ADMIN" ? (
                <h1 className={styles.title}> –ö—É—Ä—Å–∏ —à–∫–æ–ª–∏</h1>
            ) : (
                <h1 className={styles.title}> –ú–æ—ó –∫—É—Ä—Å–∏ </h1>
            )}

            <ul className={styles.list}>
                {courses.map((course) => (
                    <li key={course.id} className={styles.courseItem}>
                        <div onDoubleClick={() => navigate(`/courses/${course.id}`)} className={styles.courseName}>
                            {editingCourseId === course.id ? (
                                <input
                                    type="text"
                                    value={newCourseName}
                                    onChange={(e) => setNewCourseName(e.target.value)}
                                    className={styles.courseInput}
                                />
                            ) : (
                                course.name
                            )}
                        </div>

                        {["TEACHER", "SCHOOL_ADMIN"].includes(base.role) && (
                            <div className={styles.editContainer}>
                                {editingCourseId === course.id ? (
                                    <>
                                        <button
                                            className={styles.editButton}
                                            onClick={() => {
                                                handleUpdateCourse(course.id, newCourseName);
                                                setEditingCourseId(null);
                                            }}
                                        >
                                            –ó–±–µ—Ä–µ–≥—Ç–∏
                                        </button>
                                        <button
                                            className={styles.cancelButton}
                                            onClick={() => {
                                                setNewCourseName(course.name);
                                                setEditingCourseId(null);
                                            }}
                                        >
                                            –°–∫–∞—Å—É–≤–∞—Ç–∏
                                        </button>
                                    </>
                                ) : (
                                    <button
                                        className={styles.iconBtn}
                                        onClick={() => {
                                            setEditingCourseId(course.id);
                                            setNewCourseName(course.name);
                                        }}
                                    >
                                        ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                                    </button>
                                )}
                                <button className={styles.iconBtn} onClick={() => handleDeleteCourse(course.id)}>
                                    üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
                                </button>
                            </div>
                        )}
                    </li>
                ))}
            </ul>

            {["TEACHER", "SCHOOL_ADMIN"].includes(base?.role) && (
                <button
                    className={`${styles["createButton"]} ${styles.createButton27}`}
                    onClick={() => setIsModalOpen(true)}
                >
                    –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∫—É—Ä—Å
                </button>
            )}

            {isModalOpen && (
                <NewCourseModal onClose={() => setIsModalOpen(false)} onCourseCreated={refreshCourses} data={base} />
            )}

            <Notification message={notification?.message} type={notification?.type} />
        </div>
    );
}

export default CourseList;
