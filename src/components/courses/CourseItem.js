import React, { useState } from "react";
import ModuleItem from "./ModuleItem";
import styles from "./CourseItem.module.css";
import { deleteCourse, getCourseInfo, createModule, updateCourse } from "../../api/course";
import { connectCourseClass, delConnectCourseClass } from "../../api/course";
import Notification from "../basic/Notification";
import useAxiosPrivate from "../../hooks/useAxiosPrivate";

function CourseItem({ course, data, onCourseDeleted, onCourseUpdated, ClassesSchool }) {
    const [expanded, setExpanded] = useState(false);
    const [classes, setClasses] = useState([]);
    const [availableClasses, setAvailableClasses] = useState([]);
    const [loadingClasses, setLoadingClasses] = useState(false);
    const [selectedClass, setSelectedClass] = useState("");
    const [notification, setNotification] = useState({ message: "", type: "" });
    const [courseDetails, setCourseDetails] = useState(null);
    const [loadingCourseDetails, setLoadingCourseDetails] = useState(false);
    const [newCourseName, setNewCourseName] = useState(course.name);
    const [newModule, setNewModule] = useState({ name: "", courseId: course.id });

    // –°—Ç–µ–π—Ç–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥—É–ª—è
    const [isEditingCourse, setIsEditingCourse] = useState(false);
    const [isCreatingModule, setIsCreatingModule] = useState(false);

    const axiosPrivate = useAxiosPrivate();

    const fetchCourseDetails = async () => {
        setLoadingCourseDetails(true);
        try {
            const response = await getCourseInfo(course.id, axiosPrivate);
            setCourseDetails(response);
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫—É—Ä—Å:", error);
            setNotification({ type: "error", message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—É—Ä—Å" });
        } finally {
            setLoadingCourseDetails(false);
        }
    };

    const handleToggleExpand = async () => {
        const newExpandedState = !expanded;
        setExpanded(newExpandedState);

        if (!newExpandedState) return;

        if (!courseDetails) {
            await fetchCourseDetails();
        }

        if (["TEACHER", "SCHOOL_ADMIN"].includes(data.role) && classes.length === 0) {
            setClasses(course.classes);
            const filteredClasses = ClassesSchool.filter(
                (classItem) => !course.classes.some((c) => c.id === classItem.id)
            );
            setAvailableClasses(filteredClasses);
        }
    };

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫—É—Ä—Å—É
    const handleDeleteCourse = async (id) => {
        if (!window.confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç?")) return;
        setNotification({ type: "loading", message: "–ö—É—Ä—Å –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è..." });
        try {
            await deleteCourse(id, axiosPrivate);
            setNotification({ type: "success", message: "–ö—É—Ä—Å –≤–∏–¥–∞–ª–µ–Ω–æ" });
            if (onCourseDeleted) {
                onCourseDeleted(id);
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫—É—Ä—Å—É:", error);
            setNotification({ type: "error", message: "–ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ" });
        }
    };

    const handleUpdateCourse = async (id, newName) => {
        try {
            await updateCourse(id, { name: newName }, axiosPrivate);
            setNotification({ type: "success", message: "–ö—É—Ä—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!" });
            if (onCourseUpdated) {
                onCourseUpdated(id, newName);
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—É—Ä—Å—É:", error);
            setNotification({ type: "error", message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫—É—Ä—Å." });
        }
    };

    const handleCreateModule = async () => {
        if (!newModule.name.trim()) {
            setNotification({ type: "error", message: "–ù–∞–∑–≤–∞ —Ç–µ–º–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é" });
            return;
        }

        setNotification({ type: "loading", message: "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–º–∏..." });

        try {
            const response = await createModule(newModule, axiosPrivate);
            setCourseDetails([...courseDetails, response]);
            setNotification({ type: "success", message: "–¢–µ–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ" });
            setNewModule({ name: "", courseId: course.id });
            setIsCreatingModule(false);
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–µ–º–∏:", error);
            setNotification({ type: "error", message: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–º–∏" });
        }
    };

    const handleAddConnectionClass = async () => {
        if (!selectedClass) return;
        setNotification({ type: "loading", message: "–î–æ–¥–∞—î–º–æ –∫–ª–∞—Å..." });

        try {
            await connectCourseClass(selectedClass, course.id, axiosPrivate);
            setNotification({ type: "success", message: "–ö–ª–∞—Å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ" });

            const selectedClassId = parseInt(selectedClass, 10);
            const newClass = availableClasses.find((c) => c.id === selectedClassId);
            if (newClass) {
                setClasses([...classes, newClass]);
                setAvailableClasses(availableClasses.filter((c) => c.id !== selectedClassId));
            } else {
                setNotification({ type: "error", message: "–í–∏–±—Ä–∞–Ω–∏–π –∫–ª–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
            }

            setSelectedClass("");
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–ª–∞—Å—É:", error);
            setNotification({ type: "error", message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–ª–∞—Å" });
        }
    };

    const handleDeleteConnectionClass = async (id) => {
        setNotification({ type: "loading", message: "–í–∏–¥–∞–ª—è—î–º–æ –∑–≤'—è–∑–æ–∫..." });

        try {
            await delConnectCourseClass(id, course.id, axiosPrivate);
            setNotification({ type: "success", message: "–ó–≤'—è–∑–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–æ" });

            setClasses((prevClasses) => prevClasses.filter((classItem) => classItem.id !== id));

            const deletedClass = classes.find((classItem) => classItem.id === id);
            if (deletedClass) {
                setAvailableClasses((prevAvailableClasses) => [...prevAvailableClasses, deletedClass]);
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–≤'—è–∑–∫—É:", error);
            setNotification({ type: "error", message: "–ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ" });
        }
    };

    const handleModuleDeleted = (moduleId) => {
        setCourseDetails((prevModules) => prevModules.filter((module) => module.id !== moduleId));
    };

    return (
        <li className={expanded ? styles.courseItemExpanded : styles.courseItem}>
            <div className={styles.moduleEditContainer}>
                <button className={styles.courseBtn} onClick={handleToggleExpand}>
                    {expanded ? "üîΩ" : "‚ñ∂Ô∏è"} {course.name}
                </button>
                {expanded && ["TEACHER", "SCHOOL_ADMIN"].includes(data.role) && (
                    <div className={styles.editContainer}>
                        {isEditingCourse ? (
                            <>
                                <input
                                    type="text"
                                    value={newCourseName}
                                    onChange={(e) => setNewCourseName(e.target.value)}
                                    className={styles.courseInput}
                                />
                                <button
                                    className={styles.editButton}
                                    onClick={() => {
                                        handleUpdateCourse(course.id, newCourseName);
                                        setIsEditingCourse(false);
                                    }}
                                >
                                    –ó–±–µ—Ä–µ–≥—Ç–∏
                                </button>
                                <button
                                    className={styles.cancelButton}
                                    onClick={() => {
                                        setNewCourseName(course.name);
                                        setIsEditingCourse(false);
                                    }}
                                >
                                    –°–∫–∞—Å—É–≤–∞—Ç–∏
                                </button>
                            </>
                        ) : (
                            <button className={styles.iconBtn} onClick={() => setIsEditingCourse(true)}>
                                ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                            </button>
                        )}
                        <button className={styles.iconBtn} onClick={() => handleDeleteCourse(course.id)}>
                            üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
                        </button>
                    </div>
                )}
            </div>

            {expanded && (
                <>
                    {loadingCourseDetails ? (
                        <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫—É—Ä—Å...</p>
                    ) : (
                        <div className={styles.moduleContainer}>
                            <h4 className={styles.h4}>–°–ø–∏—Å–æ–∫ —Ç–µ–º</h4>
                            <ul className={styles.modules}>
                                {courseDetails?.length > 0 ? (
                                    courseDetails.map((module) => (
                                        <ModuleItem
                                            key={module.id}
                                            module={module}
                                            userRole={data.role}
                                            onModuleDeleted={handleModuleDeleted}
                                        />
                                    ))
                                ) : (
                                    <p>–¢–µ–º–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ</p>
                                )}
                            </ul>
                            {["TEACHER", "SCHOOL_ADMIN"].includes(data.role) && (
                                <div className={styles.createModuleContainer}>
                                    {isCreatingModule ? (
                                        <>
                                            <input
                                                type="text"
                                                placeholder="–ù–∞–∑–≤–∞ —Ç–µ–º–∏"
                                                value={newModule.name}
                                                onChange={(e) => setNewModule({ ...newModule, name: e.target.value })}
                                                className={styles.moduleInput}
                                            />
                                            <button className={styles.createBtn} onClick={handleCreateModule}>
                                                –î–æ–¥–∞—Ç–∏ —Ç–µ–º—É
                                            </button>
                                            <button
                                                className={styles.cancelButton}
                                                onClick={() => {
                                                    setIsCreatingModule(false);
                                                    setNewModule({ name: "", courseId: course.id });
                                                }}
                                            >
                                                –°–∫–∞—Å—É–≤–∞—Ç–∏
                                            </button>
                                        </>
                                    ) : (
                                        <button className={styles.addBtn} onClick={() => setIsCreatingModule(true)}>
                                            ‚ûï –î–æ–¥–∞—Ç–∏ —Ç–µ–º—É
                                        </button>
                                    )}
                                </div>
                            )}
                        </div>
                    )}

                    {["TEACHER", "SCHOOL_ADMIN"].includes(data.role) && (
                        <div className={styles.classesContainer}>
                            <h4 className={styles.h5}>–ö–ª–∞—Å–∏ –≤ —è–∫–∏—Ö —î –¥–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç:</h4>
                            {loadingClasses ? (
                                <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª–∞—Å—ñ–≤...</p>
                            ) : classes.length > 0 ? (
                                <ul className={styles.classesList}>
                                    {classes.map((classItem) => (
                                        <li key={classItem.id} className={styles.classItem}>
                                            {classItem.name}
                                            {["TEACHER", "SCHOOL_ADMIN"].includes(data.role) && (
                                                <button
                                                    className={styles.deleteClassButton}
                                                    onClick={() => handleDeleteConnectionClass(classItem.id)}
                                                >
                                                    ‚ùå
                                                </button>
                                            )}
                                        </li>
                                    ))}
                                </ul>
                            ) : (
                                <p>–í—ñ–¥—Å—É—Ç–Ω—ñ</p>
                            )}

                            {["TEACHER", "SCHOOL_ADMIN"].includes(data.role) && availableClasses.length > 0 && (
                                <div className={styles.addClassContainer}>
                                    <select value={selectedClass} onChange={(e) => setSelectedClass(e.target.value)}>
                                        <option value="">–í–∏–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å</option>
                                        {availableClasses.map((classItem) => (
                                            <option key={classItem.id} value={classItem.id}>
                                                {classItem.name}
                                            </option>
                                        ))}
                                    </select>
                                    <button className={styles.createBtn} onClick={handleAddConnectionClass}>
                                        –î–æ–¥–∞—Ç–∏ –∫–ª–∞—Å
                                    </button>
                                </div>
                            )}
                        </div>
                    )}
                </>
            )}

            <Notification message={notification.message} type={notification.type} />
        </li>
    );
}

export default CourseItem;
