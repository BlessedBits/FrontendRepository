import React, { useState } from "react";
import Materials from "./Materials";
import styles from "./ModuleItem.module.css";
import Assignment from "./Assignment";
import { createAssignment, createMaterial, deleteModule, updateModule } from "../../api/course";
import useAxiosPrivate from "../../hooks/useAxiosPrivate";
import Notification from "../basic/Notification";

function ModuleItem({ module, userRole, onModuleDeleted, onModuleClick, submissions }) {
    const [expanded, setExpanded] = useState(false);
    const axiosPrivate = useAxiosPrivate();

    const [assignments, setAssignments] = useState(module.assignments);
    const [materials, setMaterials] = useState(module.materials);

    const [showMaterialForm, setShowMaterialForm] = useState(false);
    const [showAssignmentForm, setShowAssignmentForm] = useState(false);
    const [newMaterial, setNewMaterial] = useState({ title: "", description: "", url: "" });
    const [newAssignment, setNewAssignment] = useState({ title: "", description: "", url: "", dueDate: "" });
    const [notification, setNotification] = useState(null);
    const [isEditing, setIsEditing] = useState(false);
    const [moduleName, setModuleName] = useState(module.name);

    const handleModuleClick = () => {
        setExpanded(!expanded);
        if (["TEACHER", "SCHOOL_ADMIN"].includes(userRole) && module.assignments.length > 0) {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å —É –º–æ–¥—É–ª—ñ
            module.assignments.forEach((assignment) => {
                onModuleClick(module.id, assignment.id);
            });
        }
    };

    const handleDeleteModule = async () => {
        setNotification({ type: "loading", message: "–í–∏–¥–∞–ª—è—î–º–æ –º–æ–¥—É–ª—å..." });
        try {
            await deleteModule(module.id, axiosPrivate);
            setNotification({ type: "success", message: "–ú–æ–¥—É–ª—å –≤–∏–¥–∞–ª–µ–Ω–æ!" });
            onModuleDeleted(module.id);
        } catch (error) {
            setNotification({ type: "error", message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è" });
        }
    };

    const handleUpdateModule = async () => {
        setNotification({ type: "loading", message: "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥—É–ª—è..." });
        try {
            await updateModule(module.id, { name: moduleName }, axiosPrivate);
            setNotification({ type: "success", message: "–ú–æ–¥—É–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ!" });
            setIsEditing(false);
        } catch (error) {
            setNotification({ type: "error", message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è" });
        }
    };

    const handleAddMaterial = async () => {
        const materialData = {
            title: newMaterial.title || "–ù–æ–≤–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª",
            description: newMaterial.description,
            url: newMaterial.url,
            moduleId: module.id,
        };

        try {
            const createdMaterial = await createMaterial(materialData, axiosPrivate);
            setNotification({ type: "success", message: "–ú–∞—Ç–µ—Ä—ñ–∞–ª –¥–æ–¥–∞–Ω–æ!" });
            setMaterials([...materials, createdMaterial]);
            setNewMaterial({ title: "", description: "", url: "" });
        } catch (error) {
            setNotification({ type: "error", message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª—É" });
        }
    };

    const handleAddAssignment = async () => {
        const assignmentData = {
            title: newAssignment.title || "–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è",
            description: newAssignment.description,
            url: newAssignment.url,
            dueDate: newAssignment.dueDate,
            moduleId: module.id,
        };

        try {
            const createdAssignment = await createAssignment(assignmentData, axiosPrivate);
            setNotification({ type: "success", message: "–ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ!" });
            setAssignments([...assignments, createdAssignment]);
            setNewAssignment({ title: "", description: "", url: "", dueDate: "" });
        } catch (error) {
            setNotification({ type: "error", message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è" });
        }
    };

    return (
        <li className={styles.moduleItem}>
            <div className={styles.header}>
                <button className={styles.toggleButton} onClick={handleModuleClick} aria-label="–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏">
                    {expanded ? "üîΩ" : "‚ñ∂Ô∏è"} {moduleName}
                </button>
                {isEditing && (
                    <div className={styles.editContainer}>
                        <input
                            type="text"
                            value={moduleName}
                            onChange={(e) => setModuleName(e.target.value)}
                            autoFocus
                        />
                        <button onClick={handleUpdateModule}>–ó–±–µ—Ä–µ–≥—Ç–∏</button>
                        <button
                            onClick={() => {
                                setIsEditing(false);
                                setModuleName(module.name);
                            }}
                        >
                            –°–∫–∞—Å—É–≤–∞—Ç–∏
                        </button>
                    </div>
                )}

                {["TEACHER", "SCHOOL_ADMIN"].includes(userRole) && (
                    <div className={styles.actions}>
                        <button className={styles.iconBtn} onClick={() => setIsEditing(true)}>
                            ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                        </button>
                        <button className={styles.iconBtn} onClick={handleDeleteModule}>
                            üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
                        </button>
                    </div>
                )}
            </div>

            {expanded && (
                <>
                    {materials.length > 0 && (
                        <ul className={styles.themes}>
                            <Materials materials={materials} userRole={userRole} setMaterials={setMaterials} />
                        </ul>
                    )}

                    <div className={styles.assignmentsContainer}>
                        <h4 className={styles.assignmentsHeader}>–ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ —Ç–µ–º–∏</h4>
                        <Assignment
                            assignments={assignments}
                            userRole={userRole}
                            setAssignments={setAssignments}
                            submissions={submissions}
                        />
                        {["TEACHER", "SCHOOL_ADMIN"].includes(userRole) && (
                            <>
                                <button
                                    className={styles.addButton}
                                    onClick={() => setShowMaterialForm(!showMaterialForm)}
                                >
                                    {showMaterialForm ? "–°—Ö–æ–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—É" : "–î–æ–¥–∞—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª"}
                                </button>
                                {showMaterialForm && (
                                    <div className={styles.addItem}>
                                        <input
                                            type="text"
                                            value={newMaterial.title}
                                            onChange={(e) => setNewMaterial({ ...newMaterial, title: e.target.value })}
                                            placeholder="–ù–∞–∑–≤–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª—É"
                                        />
                                        <input
                                            type="text"
                                            value={newMaterial.description}
                                            onChange={(e) =>
                                                setNewMaterial({ ...newMaterial, description: e.target.value })
                                            }
                                            placeholder="–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –æ–ø–∏—Å (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
                                        />
                                        <input
                                            type="text"
                                            value={newMaterial.url}
                                            onChange={(e) => setNewMaterial({ ...newMaterial, url: e.target.value })}
                                            placeholder="–ü–æ—Å–∏–ª–∞–Ω–Ω—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
                                        />
                                        <button className={styles.addButton} onClick={handleAddMaterial}>
                                            –î–æ–¥–∞—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª
                                        </button>
                                    </div>
                                )}
                            </>
                        )}

                        {["TEACHER", "SCHOOL_ADMIN"].includes(userRole) && (
                            <>
                                <button
                                    className={styles.addButton}
                                    onClick={() => setShowAssignmentForm(!showAssignmentForm)}
                                >
                                    {showAssignmentForm ? "–°—Ö–æ–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è" : "–î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è"}
                                </button>
                                {showAssignmentForm && (
                                    <div className={styles.addItem}>
                                        <input
                                            type="text"
                                            value={newAssignment.title}
                                            onChange={(e) =>
                                                setNewAssignment({ ...newAssignment, title: e.target.value })
                                            }
                                            placeholder="–ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è"
                                        />
                                        <input
                                            type="text"
                                            value={newAssignment.description}
                                            onChange={(e) =>
                                                setNewAssignment({ ...newAssignment, description: e.target.value })
                                            }
                                            placeholder="–û–ø–∏—Å (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
                                        />
                                        <input
                                            type="text"
                                            value={newAssignment.url}
                                            onChange={(e) =>
                                                setNewAssignment({ ...newAssignment, url: e.target.value })
                                            }
                                            placeholder="–ü–æ—Å–∏–ª–∞–Ω–Ω—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
                                        />
                                        <input
                                            type="datetime-local"
                                            value={newAssignment.dueDate}
                                            onChange={(e) =>
                                                setNewAssignment({ ...newAssignment, dueDate: e.target.value })
                                            }
                                            placeholder="–î–µ–¥–ª–∞–π–Ω (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
                                        />
                                        <button className={styles.addButton} onClick={handleAddAssignment}>
                                            –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
                                        </button>
                                    </div>
                                )}
                            </>
                        )}
                    </div>
                </>
            )}

            {notification && <Notification type={notification.type} message={notification.message} />}
        </li>
    );
}

export default ModuleItem;
